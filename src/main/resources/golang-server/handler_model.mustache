{{>header}}
// Package {{apiPackage}} contains all API models and handlers
package {{apiPackage}}

import (
{{#imports}}
{{#-first}}
{{/-first}}
  "{{import}}"
{{#-last}}
{{/-last}}
{{/imports}}
)
{{#operations}}
{{#operation}}
{{#vendorExtensions.hasInputParams}}

// {{operationIdCamelCase}}InputParam contains the parameters for the {{operationIdCamelCase}} operation
type {{operationIdCamelCase}}InputParam struct {
{{#vendorExtensions.inputParams}}
{{#param}}
  // {{paramName}} param{{#description}}: {{{.}}}{{/description}}
  {{paramName}} {{#isNullable}}*{{/isNullable}}{{{dataType}}} {{{vendorExtensions.tag}}}
{{/param}}
{{/vendorExtensions.inputParams}}
}

// Bind manages request partameters
func (p *{{operationIdCamelCase}}InputParam) Bind(r *http.Request) (err error) {
  {{#vendorExtensions.hasPathParams}}
  if err = rest.DecodePath(r, p); err != nil {
    return err
  }

  {{/vendorExtensions.hasPathParams}}
  {{#vendorExtensions.hasQueryParams}}
  if err = rest.DecodeQuery(r, p); err != nil {
    return err
  }

  {{/vendorExtensions.hasQueryParams}}
  {{#vendorExtensions.hasFormParams}}
  if err = rest.DecodeForm(r, p); err != nil {
    return err
  }

  {{/vendorExtensions.hasFormParams}}
  {{#vendorExtensions.hasPropertyDefault}}
  if err = schema.SetDefaults(p); err != nil {
    return err
  }

  {{/vendorExtensions.hasPropertyDefault}}
  return nil
}
{{/vendorExtensions.hasInputParams}}
{{#hasParams}}

// {{operationIdCamelCase}}Input is the input for the {{operationIdCamelCase}} operation
type {{operationIdCamelCase}}Input struct {
  {{#vendorExtensions.hasInputParams}}
  // Param contains the parameters for the {{operationIdCamelCase}} operation
  Param *{{operationIdCamelCase}}InputParam `json:"-"{{#withXml}} xml:"-"{{/withXml}}`
  {{/vendorExtensions.hasInputParams}}
  {{#vendorExtensions.hasBodyParams}}
  {{#bodyParam}}
  {{#isFile}}
  // Filename is the name of the file
  Filename string {{{vendorExtensions.tag}}}
  // Size is the size of the file
  Size int64 {{{vendorExtensions.tag}}}
  {{/isFile}}
  // Body payload{{#description}}: {{{description}}}{{/description}}
  Body {{#isModel}}*{{/isModel}}{{^isModel}}{{#isNullable}}*{{/isNullable}}{{/isModel}}{{{dataType}}} {{{vendorExtensions.tag}}}
  {{/bodyParam}}
  {{/vendorExtensions.hasBodyParams}}
}

// Bind manages request input
func (p *{{operationIdCamelCase}}Input) Bind(r *http.Request) (err error) {
  {{#vendorExtensions.hasBodyParams}}
  {{#bodyParam}}
  {{#isModel}}
  if p.Body != nil {
    if err = p.Body.Bind(r); err != nil {
      return
    }
  }

  {{/isModel}}
  {{#isFile}}
  var header *multipart.FileHeader
  if p.Body, header, err = r.FormFile("{{baseName}}"); err != nil {
    return
  }

  p.Filename = header.Filename
  p.Size = header.Size

  {{/isFile}}
  {{#isByteArray}}
  p.Body = base64.NewDecoder(base64.StdEncoding, r.Body)
  {{/isByteArray}}
  {{/bodyParam}}
  {{/vendorExtensions.hasBodyParams}}
  {{#vendorExtensions.hasInputParams}}
  p.Param = &{{operationIdCamelCase}}InputParam{}
  err = p.Param.Bind(r)
  {{/vendorExtensions.hasInputParams}}
  return
}
{{#vendorExtensions.hasBodyParams}}
{{#bodyParam}}
{{^isFile}}
{{^isByteArray}}

// UnmarshalJSON unmarshals the body from JSON
func (p *{{operationIdCamelCase}}Input) UnmarshalJSON(data []byte) error {
  {{#isModel}}
  p.Body = &{{{dataType}}}{}
  {{/isModel}}
  return json.Unmarshal(data, {{^isModel}}{{^isNullable}}&{{/isNullable}}{{/isModel}}p.Body);
}
{{#withXml}}

// UnmarshalXML unmarshals the body from XML
func (p *{{operationIdCamelCase}}Input) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
  {{#isModel}}
  p.Body = &{{{dataType}}}{}
  {{/isModel}}
  return e.DecodeElement({{^isModel}}{{^isNullable}}&{{/isNullable}}{{/isModel}}p.Body, start)
}
{{/withXml}}
{{/isByteArray}}
{{/isFile}}
{{/bodyParam}}
{{/vendorExtensions.hasBodyParams}}
{{/hasParams}}
{{#vendorExtensions.defaultResponse}}
{{#hasHeaders}}

// {{operationIdCamelCase}}OutputParam is the header for the {{operationIdCamelCase}} operation's output
type {{operationIdCamelCase}}OutputParam struct {
  {{#headers}}
  // {{name}} header{{#description}}: {{{.}}}{{/description}}
  {{name}} {{#isNullable}}*{{/isNullable}}{{{dataType}}} {{{vendorExtensions.tag}}}
  {{/headers}}
}

// Render manages response payloads.
func (h *{{operationIdCamelCase}}OutputParam) Render(w http.ResponseWriter, r *http.Request) (err error) {
  if err = rest.EncodeHeader(w, h); err != nil {
    return err
  }
  {{#vendorExtensions.hasPropertyDefault}}

  if err = schema.SetDefaults(h); err != nil {
    return err
  }
  {{/vendorExtensions.hasPropertyDefault}}
  return nil
}
{{/hasHeaders}}

// {{operationIdCamelCase}}Output is the output for the {{operationIdCamelCase}} operation
type {{operationIdCamelCase}}Output struct {
  {{#hasHeaders}}
  Param *{{operationIdCamelCase}}OutputParam `json:"-"{{#withXml}} xml:"-"{{/withXml}}`
  {{/hasHeaders}}
  {{#vendorExtensions.hasBody}}
  // Body payload{{#description}}: {{{.}}}{{/description}}
  Body {{#isModel}}*{{/isModel}}{{^isModel}}{{#isNullable}}*{{/isNullable}}{{/isModel}}{{{dataType}}} {{{vendorExtensions.tag}}}
  {{/vendorExtensions.hasBody}}
}

// Render manages response payloads.
func (p *{{operationIdCamelCase}}Output) Render(w http.ResponseWriter, r *http.Request) (err error) {
  rest.Status(r, {{code}})
  {{#hasHeaders}}

  p.Param = &{{operationIdCamelCase}}OutputParam{}
  if err = p.Param.Render(w, r); err != nil {
    return
  }
  {{/hasHeaders}}
  {{#vendorExtensions.hasBody}}
  {{#isModel}}

  if p.Body != nil {
    if err = p.Body.Render(w, r); err != nil {
      return
    }
  }
  {{/isModel}}
  {{#isFile}}

  _, err = io.Copy(w, p.Body)
  {{/isFile}}
  {{#isByteArray}}

  writer := base64.NewEncoder(base64.StdEncoding, w)
  _, err = io.Copy(writer, p.Body)
  {{/isByteArray}}
  {{/vendorExtensions.hasBody}}
  return
}
{{#vendorExtensions.hasBody}}
{{^isFile}}{{^isByteArray}}
// MarshalJSON marshals the body as JSON
func (p *{{operationIdCamelCase}}Output) MarshalJSON() ([]byte, error) {
  return json.Marshal({{^isModel}}{{^isNullable}}&{{/isNullable}}{{/isModel}}p.Body)
}
{{#withXml}}

// MarshalXML marshals the body as XML
func (p *{{operationIdCamelCase}}Output) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
  return e.EncodeElement({{^isModel}}{{^isNullable}}&{{/isNullable}}{{/isModel}}p.Body, start)
}
{{/withXml}}
{{/isByteArray}}
{{/isFile}}
{{/vendorExtensions.hasBody}}
{{/vendorExtensions.defaultResponse}}
{{/operation}}
{{/operations}}
