# {{gitRepoId}}

{{#appDescription}}
{{{appDescription}}}
{{/appDescription}}

### Overview

This server was generated by the
[openapi-generator](https://openapi-generator.tech) project. By using the
[OpenAPI-Spec](https://github.com/OAI/OpenAPI-Specification) from a remote
server, you can easily generate a server stub. To see how to make this your
own, look [here](https://openapi-generator.tech).

- API version: {{appVersion}}{{^hideGenerationTimestamp}}
- Build date: {{generatedDate}}{{/hideGenerationTimestamp}}

{{#infoUrl}}
For more information, please visit [{{{infoUrl}}}]({{{infoUrl}}})
{{/infoUrl}}

### Prerequisite

You should have the following tools installed:

- [Golang](https://www.golang.org) language (at least version 1.12)

*Make sure that the environment variable `GOPATH` is set. The `GOPATH` directory
will be used as workspace directory for all GO projects.*

### Getting Started

You should get the source code by executing the following commands:

```bash
$ export ORG_DIR=github.com/{{gitUserId}}
$ mkdir -p $GOPATH/src/$ORG_DIR
$ cd $GOPATH/src/$ORG_DIR
$ git clone git@github.com:{{gitUserId}}/{{gitRepoId}}.git
```

### Getting all dependencies

In order to get a dependencies from private repositories you should
configure your git client to use git protocol:

```
$ git config --global url."git@github.com:".insteadOf "https://github.com/"
```

The dependencies are managed by Golang's
[modules](https://github.com/golang/go/wiki/Modules) dependency system:

```bash
$ export GO111MODULE=on
$ cd $GOPATH/src/$ORG_DIR/{{gitRepoId}}
$ go get ./...
```

### Running the tests

The packages is tested in
[BDD](https://en.wikipedia.org/wiki/Behavior-driven_development) style. For
that purpose, we are using [Ginkgo](http://onsi.github.io/ginkgo/) and
[Gomega](http://onsi.github.io/gomega/) packages.

You can install all of them by executing the following commands:

```bash
$ go get github.com/onsi/ginkgo/ginkgo
$ go get github.com/onsi/gomega
```

Then you can run all tests with the following command:

```bash
$ ginkgo -r
```

### Building the binary

```bash
$ export GO111MODULE=on
$ cd $GOPATH/src/$ORG_DIR/{{gitRepoId}}
$ mkdir -p build
$ go get ./...
$ go build -o ./build/{{gitRepoId}} $ORG_DIR{{gitRepoId}}/cmd/{{gitRepoId}}
```

### Running the server

To run the server, follow these simple steps:

```bash
# run the compiled binary
$ ./build/reply-api
```

```bash
# another option is just to use golang command line tool
$ go run cmd/{{gitRepoId}}/main.go
```

#### Docker

To run the server in a docker container, you first need to build a docker
image:

```bash
$ go mod vendor
$ go mod verify
$ docker build -f deployment/dockerfiles/Dockerfile.{{{gitRepoId}}} -t {{gitRepoId}} .
```

Once the image is built, just run:

```bash
docker run --rm -it {{{gitRepoId}}} 
```
