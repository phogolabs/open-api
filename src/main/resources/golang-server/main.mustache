package main

import (
  "context"
	"net/http"
	"os"
	"syscall"

	"github.com/phogolabs/cli"
	"github.com/phogolabs/log"
	"github.com/phogolabs/log/handler/json"
	"github.com/phogolabs/log/handler/rollbar"
	"github.com/prometheus/client_golang/prometheus/promhttp"
	"{{invokerPackage}}/service"
)

var (
	// Build number
	Build = "dev"
)

var flags = []cli.Flag{
	&cli.StringFlag{
		Name:   "log-level",
		Value:  "INFO",
		Usage:  "level of logging",
		EnvVar: "{{localVariablePrefix}}_LOG_LEVEL",
	},
	&cli.StringFlag{
		Name:   "rollbar-token",
		Value:  "",
		Usage:  "Rollbar Token",
		EnvVar: "{{localVariablePrefix}}_ROLLBAR_TOKEN",
	},
	&cli.StringFlag{
		Name:   "rollbar-environment",
		Value:  "development",
		Usage:  "Rollbar Environment",
		EnvVar: "{{localVariablePrefix}}_ROLLBAR_ENVIRONMENT",
	},
	&cli.StringFlag{
		Name:   "listen-addr",
		Value:  ":9292",
		Usage:  "listen address of HTTP server",
		EnvVar: "{{localVariablePrefix}}_LISTEN_ADDR",
	},
	&cli.StringFlag{
		Name:   "metrics-listen-addr",
		Value:  ":8282",
		Usage:  "listen address of metrics HTTP server",
		EnvVar: "{{localVariablePrefix}}_METRICS_LISTEN_ADDR",
	},
}

func main() {
	app := &cli.App{
		Name:       "{{projectName}}",
		HelpName:   "{{projectName}}",
		Usage:      "{{projectName}} http service",
		UsageText:  "{{projectName}} [global options]",
		Version:    Build,
		Writer:     os.Stdout,
		ErrWriter:  os.Stderr,
		Flags:      flags,
		OnSignal:   term,
		Action:     run,
		AfterInit:  afterInit,
		BeforeInit: beforeInit,
		Signals:    []os.Signal{syscall.SIGTERM},
	}

	app.Run(os.Args)
}

func beforeInit(ctx *cli.Context) error {
	level, err := log.ParseLevel(ctx.String("log-level"))
	if err != nil {
		return err
	}

	log.SetLevel(level)

	fields := log.FieldMap{
		"app":     ctx.Command.Name,
		"version": ctx.Manifest.Version,
	}

	log.SetDefaultFields(fields)
	return nil
}

func afterInit(ctx *cli.Context) error {
	jhandler := json.New(os.Stdout)

	rhandler := &log.LevelHandler{
		Level: log.WarnLevel,
		Handler: rollbar.New(&rollbar.Config{
			CodeVersion: ctx.Manifest.Version,
			Token:       ctx.String("rollbar-token"),
			Environment: ctx.String("rollbar-environment"),
			ServerHost:  os.Getenv("HOSTNAME"),
			ServerRoot:  "https://{{invokerPackage}}",
		}),
	}

	handler := log.CompositeHandler{
		jhandler,
		rhandler,
	}

	log.SetHandler(handler)
	return nil
}

func run(ctx *cli.Context) (err error) {
	server := newServer(ctx)
	ctx.Metadata["server"] = server

	log.Infof("HTTP Server is listening on %s", ctx.String("listen-addr"))

	if err = server.ListenAndServe(); err != nil {
		if err == http.ErrServerClosed {
			err = nil
		}
	}

	return err
}

func term(ctx *cli.Context) error {
	if ctx.Signal != syscall.SIGTERM {
		return nil
	}

	log.Info("shutting down gracefully")

	if server, ok := ctx.Metadata["server"].(*http.Server); ok {
		if err := server.Shutdown(context.TODO()); err != nil {
			log.WithError(err).Errorf("http shutdown on signal %v", ctx.Signal)
		}
	}

	return nil
}

func newServer(ctx *cli.Context) *http.Server {
	go http.ListenAndServe(ctx.String("metrics-listen-addr"), promhttp.Handler())

	var (
		config  = &service.Config{}
		handler = service.New(config)
	)

	return &http.Server{
		Addr:    ctx.String("listen-addr"),
		Handler: handler,
	}
}
