//
// Swagger Petstore
// 
// This is a sample Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/). 
// 
// API version: 1.0.0
// Contact: apiteam@swagger.io
//
// Code generated by OpenAPI Generator (https://http://github.com/openAPITools/openapi-generator)

// Package test contains all API models and handlers
package test

import (
  "net/http"
  "encoding/json"
  "github.com/phogolabs/rest"
  "time"
)

// CreateUserInput is the input for the CreateUser operation
type CreateUserInput struct {
  // Body payload: Created user object
  Body User `json:"-" xml:"-" validate:"required"`
}

// Bind manages request input
func (p *CreateUserInput) Bind(r *http.Request) (err error) {
  return
}

// UnmarshalJSON unmarshals the body from JSON
func (p *CreateUserInput) UnmarshalJSON(data []byte) error {
  return json.Unmarshal(data, &p.Body);
}

// CreateUsersWithArrayInputInput is the input for the CreateUsersWithArrayInput operation
type CreateUsersWithArrayInputInput struct {
  // Body payload: List of user object
  Body array `json:"-" xml:"-" validate:"required"`
}

// Bind manages request input
func (p *CreateUsersWithArrayInputInput) Bind(r *http.Request) (err error) {
  return
}

// UnmarshalJSON unmarshals the body from JSON
func (p *CreateUsersWithArrayInputInput) UnmarshalJSON(data []byte) error {
  return json.Unmarshal(data, &p.Body);
}

// CreateUsersWithListInputInput is the input for the CreateUsersWithListInput operation
type CreateUsersWithListInputInput struct {
  // Body payload: List of user object
  Body array `json:"-" xml:"-" validate:"required"`
}

// Bind manages request input
func (p *CreateUsersWithListInputInput) Bind(r *http.Request) (err error) {
  return
}

// UnmarshalJSON unmarshals the body from JSON
func (p *CreateUsersWithListInputInput) UnmarshalJSON(data []byte) error {
  return json.Unmarshal(data, &p.Body);
}

// DeleteUserInputParam contains the parameters for the DeleteUser operation
type DeleteUserInputParam struct {
  // Username param: The name that needs to be deleted
  Username string `json:"-" xml:"-" path:"username" validate:"required"`
}

// Bind manages request partameters
func (p *DeleteUserInputParam) Bind(r *http.Request) (err error) {
  if err = rest.DecodePath(r, p); err != nil {
    return err
  }

  return nil
}

// DeleteUserInput is the input for the DeleteUser operation
type DeleteUserInput struct {
  // Param contains the parameters for the DeleteUser operation
  Param DeleteUserInputParam `json:"-"`
}

// Bind manages request input
func (p *DeleteUserInput) Bind(r *http.Request) (err error) {
  err = p.Param.Bind(r)
  return
}

// GetUserByNameInputParam contains the parameters for the GetUserByName operation
type GetUserByNameInputParam struct {
  // Username param: The name that needs to be fetched. Use user1 for testing.
  Username string `json:"-" xml:"-" path:"username" validate:"required"`
}

// Bind manages request partameters
func (p *GetUserByNameInputParam) Bind(r *http.Request) (err error) {
  if err = rest.DecodePath(r, p); err != nil {
    return err
  }

  return nil
}

// GetUserByNameInput is the input for the GetUserByName operation
type GetUserByNameInput struct {
  // Param contains the parameters for the GetUserByName operation
  Param GetUserByNameInputParam `json:"-"`
}

// Bind manages request input
func (p *GetUserByNameInput) Bind(r *http.Request) (err error) {
  err = p.Param.Bind(r)
  return
}

// GetUserByNameOutput is the output for the GetUserByName operation
type GetUserByNameOutput struct {
  // Body payload
  Body User `json:"-"`
}

// Render manages response payloads.
func (p *GetUserByNameOutput) Render(w http.ResponseWriter, r *http.Request) (err error) {
  w.WriteHeader(200)
  return
}

// MarshalJSON marshals the body as JSON
func (p *GetUserByNameOutput) MarshalJSON() ([]byte, error) {
  return json.Marshal(&p.Body);
}

// LoginUserInputParam contains the parameters for the LoginUser operation
type LoginUserInputParam struct {
  // Username param: The user name for login
  Username string `json:"-" xml:"-" query:"username" validate:"required"`
  // Password param: The password for login in clear text
  Password string `json:"-" xml:"-" query:"password" validate:"required"`
}

// Bind manages request partameters
func (p *LoginUserInputParam) Bind(r *http.Request) (err error) {
  if err = rest.DecodeQuery(r, p); err != nil {
    return err
  }

  return nil
}

// LoginUserInput is the input for the LoginUser operation
type LoginUserInput struct {
  // Param contains the parameters for the LoginUser operation
  Param LoginUserInputParam `json:"-"`
}

// Bind manages request input
func (p *LoginUserInput) Bind(r *http.Request) (err error) {
  err = p.Param.Bind(r)
  return
}

// LoginUserOutputParam is the header for the LoginUser operation's output
type LoginUserOutputParam struct {
  // RateLimit header: calls per hour allowed by the user
  RateLimit int32 `header:"x-Rate-Limit" validate:"-"`
  // ExpiresAfter header: date in UTC when token expires
  ExpiresAfter time.Time `header:"X-Expires-After" validate:"-"`
}

// Render manages response payloads.
func (h *LoginUserOutputParam) Render(w http.ResponseWriter, r *http.Request) (err error) {
  return rest.EncodeHeader(w, h);
}

// LoginUserOutput is the output for the LoginUser operation
type LoginUserOutput struct {
  Param LoginUserOutputParam `json:"-"`
  // Body payload
  Body string `json:"-"`
}

// Render manages response payloads.
func (p *LoginUserOutput) Render(w http.ResponseWriter, r *http.Request) (err error) {
  w.WriteHeader(200)

  if err = p.Param.Render(w, r); err != nil {
    return
  }
  return
}

// MarshalJSON marshals the body as JSON
func (p *LoginUserOutput) MarshalJSON() ([]byte, error) {
  return json.Marshal(&p.Body);
}

// UserUsernamePutInputParam contains the parameters for the UserUsernamePut operation
type UserUsernamePutInputParam struct {
  // Username param: name that need to be updated
  Username string `json:"-" xml:"-" path:"username" validate:"required"`
}

// Bind manages request partameters
func (p *UserUsernamePutInputParam) Bind(r *http.Request) (err error) {
  if err = rest.DecodePath(r, p); err != nil {
    return err
  }

  return nil
}

// UserUsernamePutInput is the input for the UserUsernamePut operation
type UserUsernamePutInput struct {
  // Param contains the parameters for the UserUsernamePut operation
  Param UserUsernamePutInputParam `json:"-"`
  // Body payload: Updated user object
  Body User `json:"-" xml:"-" validate:"required"`
}

// Bind manages request input
func (p *UserUsernamePutInput) Bind(r *http.Request) (err error) {
  err = p.Param.Bind(r)
  return
}

// UnmarshalJSON unmarshals the body from JSON
func (p *UserUsernamePutInput) UnmarshalJSON(data []byte) error {
  return json.Unmarshal(data, &p.Body);
}
