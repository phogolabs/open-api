//
// Swagger Petstore
// 
// This is a sample Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/). 
// 
// API version: 1.0.0
// Contact: apiteam@swagger.io
//
// Code generated by OpenAPI Generator (https://http://github.com/openAPITools/openapi-generator)

// Package handler contains all API models and handlers
package handler

import (
	"net/http"

	"github.com/go-chi/chi"
	"github.com/phogolabs/rest"
)

// PetAPI handler
type PetAPI struct{
 // TODO: add your dependencies here
}

// Mount mounts the PetAPI handler
func (h *PetAPI) Mount(r chi.Router) {
  r.Group(func(r chi.Router) {
     r.Post("/pet/{status}", h.addPet)
     r.Delete("/pet/{petId}", h.deletePet)
     r.Get("/pet/findByStatus", h.findPetsByStatus)
     r.Get("/pet/findByTags", h.findPetsByTags)
     r.Get("/pet/{petId}", h.getPetByID)
     r.Put("/pet/{status}", h.updatePet)
     r.Post("/pet/{petId}", h.updatePetWithForm)
     r.Post("/pet/{petId}/uploadImage", h.uploadFile)
  })
}

// AddPet operation: Add a new pet to the store
// @param InlineObject (optional)
func (h *PetAPI) addPet(w http.ResponseWriter, r *http.Request) {
  input := &AddPetInput{}

  if err := rest.Bind(w, r, input); err != nil {
    rest.Error(w, r, err)
    return
  }

  //TODO: implement the operation addPet
}


// DeletePet operation: Deletes a pet
// @param PetID: Pet id to delete (default: null)
// @param APIKey (default: null) (optional)
func (h *PetAPI) deletePet(w http.ResponseWriter, r *http.Request) {
  input := &DeletePetInput{}

  if err := rest.Bind(w, r, input); err != nil {
    rest.Error(w, r, err)
    return
  }

  //TODO: implement the operation deletePet
}


// FindPetsByStatus operation: Finds Pets by status
// Multiple status values can be provided with comma separated strings
// @param Status: Status values that need to be considered for filter (default: null)
// @param Time (default: null) (optional)
// @return array
func (h *PetAPI) findPetsByStatus(w http.ResponseWriter, r *http.Request) {
  input := &FindPetsByStatusInput{}

  if err := rest.Bind(w, r, input); err != nil {
    rest.Error(w, r, err)
    return
  }

  //TODO: implement the operation findPetsByStatus

  output := &FindPetsByStatusOutput{}
  rest.Render(w, r, output)
}


// FindPetsByTags operation: Finds Pets by tags
// Multiple tags can be provided with comma separated strings. Use\\ \\ tag1, tag2, tag3 for testing.
// @param Tags: Tags to filter by (default: null)
// @return array
func (h *PetAPI) findPetsByTags(w http.ResponseWriter, r *http.Request) {
  input := &FindPetsByTagsInput{}

  if err := rest.Bind(w, r, input); err != nil {
    rest.Error(w, r, err)
    return
  }

  //TODO: implement the operation findPetsByTags

  output := &FindPetsByTagsOutput{}
  rest.Render(w, r, output)
}


// GetPetByID operation: Find pet by ID
// Returns a single pet
// @param PetID: ID of pet to return (default: null)
// @return Pet
func (h *PetAPI) getPetByID(w http.ResponseWriter, r *http.Request) {
  input := &GetPetByIDInput{}

  if err := rest.Bind(w, r, input); err != nil {
    rest.Error(w, r, err)
    return
  }

  //TODO: implement the operation getPetByID

  output := &GetPetByIDOutput{}
  rest.Render(w, r, output)
}


// UpdatePet operation: Update an existing pet
// @param Pet: Pet object that needs to be added to the store
func (h *PetAPI) updatePet(w http.ResponseWriter, r *http.Request) {
  input := &UpdatePetInput{}

  if err := rest.Bind(w, r, input); err != nil {
    rest.Error(w, r, err)
    return
  }

  //TODO: implement the operation updatePet
}


// UpdatePetWithForm operation: Updates a pet in the store with form data
// @param PetID: ID of pet that needs to be updated (default: 10)
// @param PetID2: ID of pet that needs to be updated (default: 10)
// @param Name: Updated name of the pet (default: null) (optional)
// @param Status: Updated status of the pet (default: null) (optional)
func (h *PetAPI) updatePetWithForm(w http.ResponseWriter, r *http.Request) {
  input := &UpdatePetWithFormInput{}

  if err := rest.Bind(w, r, input); err != nil {
    rest.Error(w, r, err)
    return
  }

  //TODO: implement the operation updatePetWithForm
}


// UploadFile operation: uploads an image
// @param PetID: ID of pet to update (default: null)
// @param Body (optional)
// @return ApiResponse
func (h *PetAPI) uploadFile(w http.ResponseWriter, r *http.Request) {
  input := &UploadFileInput{}

  if err := rest.Bind(w, r, input); err != nil {
    rest.Error(w, r, err)
    return
  }

  //TODO: implement the operation uploadFile

  output := &UploadFileOutput{}
  rest.Render(w, r, output)
}

