//
// Swagger Petstore
// 
// This is a sample Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/). 
// 
// API version: 1.0.0
// Contact: apiteam@swagger.io
//
// Code generated by OpenAPI Generator (https://http://github.com/openAPITools/openapi-generator)

// Package handler contains all API models and handlers
package handler

import (
	"net/http"

	"github.com/go-chi/chi"
	"github.com/phogolabs/rest"
)

// StoreAPI handler
type StoreAPI struct{
 // TODO: add your dependencies here
}

// Mount mounts the StoreAPI handler
func (h *StoreAPI) Mount(r chi.Router) {
  r.Group(func(r chi.Router) {
     r.Delete("/store/order/{orderId}", h.deleteOrder)
     r.Get("/store/inventory", h.getInventory)
     r.Get("/store/order/{orderId}", h.getOrderByID)
     r.Post("/store/order", h.placeOrder)
  })
}

// DeleteOrder operation: Delete purchase order by ID
// For valid response try integer IDs with positive integer value.\\ \\ Negative or non-integer values will generate API errors
// @param OrderID: ID of the order that needs to be deleted (default: null)
func (h *StoreAPI) deleteOrder(w http.ResponseWriter, r *http.Request) {
  input := &DeleteOrderInput{}

  if err := rest.Bind(w, r, input); err != nil {
    rest.Error(w, r, err)
    return
  }

  //TODO: implement the operation deleteOrder
}


// GetInventory operation: Returns pet inventories by status
// Returns a map of status codes to quantities
// @return map
func (h *StoreAPI) getInventory(w http.ResponseWriter, r *http.Request) {
  //TODO: implement the operation getInventory

  output := &GetInventoryOutput{}
  rest.Render(w, r, output)
}


// GetOrderByID operation: Find purchase order by ID
// For valid response try integer IDs with value >= 1 and <= 10.\\ \\ Other values will generated exceptions
// @param OrderID: ID of pet that needs to be fetched (default: null)
// @return Order
func (h *StoreAPI) getOrderByID(w http.ResponseWriter, r *http.Request) {
  input := &GetOrderByIDInput{}

  if err := rest.Bind(w, r, input); err != nil {
    rest.Error(w, r, err)
    return
  }

  //TODO: implement the operation getOrderByID

  output := &GetOrderByIDOutput{}
  rest.Render(w, r, output)
}


// PlaceOrder operation: Place an order for a pet
// @param Order: order placed for purchasing the pet
// @return Order
func (h *StoreAPI) placeOrder(w http.ResponseWriter, r *http.Request) {
  input := &PlaceOrderInput{}

  if err := rest.Bind(w, r, input); err != nil {
    rest.Error(w, r, err)
    return
  }

  //TODO: implement the operation placeOrder

  output := &PlaceOrderOutput{}
  rest.Render(w, r, output)
}

